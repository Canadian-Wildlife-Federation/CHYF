package net.refractions.chyf.hygraph;

import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.Point;
import com.vividsolutions.jts.io.ParseException;
import com.vividsolutions.jts.io.WKTReader;

import net.refractions.chyf.ChyfDatastore;
import net.refractions.chyf.hygraph.DrainageArea;
import net.refractions.chyf.pourpoint.Pourpoint;
import net.refractions.chyf.pourpoint.PourpointEngine;
import net.refractions.chyf.pourpoint.PourpointOutput;
import net.refractions.chyf.pourpoint.UniqueSubCatchment;
import net.refractions.chyf.rest.GeotoolsGeometryReprojector;

/**
 * This is a test that runs on quickly on a very simple dataset
 * stored in the data_small test folder.  This test case mimics
 * the exmple provided in the contract for the initial pourpoint
 * work.
 * 
 * @author Emily
 *
 */
public class SimpleDataPourpointTest {

	private static ChyfDatastore datastore; 
	
	@BeforeClass 
	public static void startup() throws URISyntaxException{
		URL url = ClassLoader.getSystemResource("data_small/" + ChyfDatastore.FLOWPATH_FILE);
		Path datapath = Paths.get(url.toURI()).getParent();
		datastore = new ChyfDatastore(datapath.toString() + "/");
	}
	
	@Test
	public void test_pourpointProjection() throws URISyntaxException {
		List<Pourpoint> points = new ArrayList<>();
		points.add(new Pourpoint(GeotoolsGeometryReprojector.reproject(BasicTestSuite.GF.createPoint(new Coordinate(-73.47460180813951, 45.111997089079395)), ChyfDatastore.BASE_SRS), -2, "P4"));
		
		HashMap<String, Coordinate> projectedPoints = new HashMap<>();
		projectedPoints.put("P4", new Coordinate(-73.47452470185075, 45.112175703542384));
		
		PourpointOutput results = ( new PourpointEngine(points, datastore.getHyGraph()) ).compute(null);
		
		//test point projection
		for(Pourpoint point : results.getPoints()) {
			Coordinate c = projectedPoints.get(point.getId());
			Point expected = GeotoolsGeometryReprojector.reproject(BasicTestSuite.GF.createPoint(new Coordinate(c)), ChyfDatastore.BASE_SRS);
			Point actual = point.getProjectedPoint();
			Assert.assertTrue("Pourpoint not projected to expected location ( " + c.x + " " + c.y +")", expected.equalsExact(actual, 0.00001));
		}
	}
	
	@Test
	public void test_simplePourpointTest() throws URISyntaxException, ParseException{
		List<Pourpoint> points = new ArrayList<>();
		points.add(new Pourpoint(GeotoolsGeometryReprojector.reproject(BasicTestSuite.GF.createPoint(new Coordinate(-73.4622349011061, 45.101463647914315)), ChyfDatastore.BASE_SRS), 0, "P1"));
		points.add(new Pourpoint(GeotoolsGeometryReprojector.reproject(BasicTestSuite.GF.createPoint(new Coordinate(-73.46392456572985, 45.10495082809525)), ChyfDatastore.BASE_SRS), 2, "P2"));
		points.add(new Pourpoint(GeotoolsGeometryReprojector.reproject(BasicTestSuite.GF.createPoint(new Coordinate(-73.46755554715536, 45.106892144897)), ChyfDatastore.BASE_SRS), 1, "P3"));
		points.add(new Pourpoint(GeotoolsGeometryReprojector.reproject(BasicTestSuite.GF.createPoint(new Coordinate(-73.474930904963, 45.1122588226033)), ChyfDatastore.BASE_SRS), -2, "P4"));
		points.add(new Pourpoint(GeotoolsGeometryReprojector.reproject(BasicTestSuite.GF.createPoint(new Coordinate(-73.46838240431167, 45.11530451770461)), ChyfDatastore.BASE_SRS), 0, "P5"));
		
		HashMap<String, Coordinate> projectedPoints = new HashMap<>();
		projectedPoints.put("P1", new Coordinate(-73.46238158151098, 45.101257516041564));
		projectedPoints.put("P2", new Coordinate(-73.46455294608097, 45.104443757530134));
		projectedPoints.put("P3", new Coordinate(-73.46707833748302, 45.10751199007468));
		projectedPoints.put("P4", new Coordinate(-73.47452470185075, 45.112175703542384));
		projectedPoints.put("P5", new Coordinate(-73.4685416483889, 45.11506456249201));
		
		PourpointOutput results = ( new PourpointEngine(points, datastore.getHyGraph()) ).compute(null);
		
		//test point projection
		for(Pourpoint point : results.getPoints()) {
			Coordinate c = projectedPoints.get(point.getId());
			Point expected = GeotoolsGeometryReprojector.reproject(BasicTestSuite.GF.createPoint(new Coordinate(c)), ChyfDatastore.BASE_SRS);
			Point actual = point.getProjectedPoint();
			Assert.assertTrue("Pourpoint not projected to expected location ( " + c.x + " " + c.y +")", expected.equalsExact(actual, 0.00001));
		}
		
		
		//test pourpoint relationship
		Integer[][] ppRel = results.getNonOverlappingCatchmentRelationship();
		Integer[][] expectedRel = new Integer[][]{
				{null, -1, -1, -1, -1},
				{1, null, null, null, null},
				{1, null, null, null, null},
				{1, null, null, null, null},
				{1, null, null, null, null},
		};
		for (int i = 0; i < expectedRel.length; i ++) {
			for (int j = 0; j < expectedRel.length; j ++) {
				if (ppRel[i][j] != expectedRel[i][j]) {
					Assert.fail("Pourpoint relationship matrix incorrect");
				}
			}
		}
		
		//test catchments
		HashMap<String, String> expectedCatchments = new HashMap<>();
		expectedCatchments.put("P1", "POLYGON (( -73.4664080560344 45.10185657745563, -73.46654499005874 45.10274664861386, -73.46745788355436 45.10222173485388, -73.46864464509866 45.10217609017909, -73.46983140664298 45.10217609017909, -73.47106381286207 45.102929227312984, -73.47181694999595 45.10272382627647, -73.473163467902 45.10272382627647, -73.47457845282021 45.103317207048626, -73.47512618891759 45.10423010054424, -73.4753544122915 45.10525710572682, -73.47599343773844 45.105576618450286, -73.47624448344973 45.10639822259635, -73.48008498460628 45.10591972473696, -73.4848139793096 45.108540613367715, -73.48757730753987 45.11090511071937, -73.48717847666127 45.11489341950531, -73.48358899875393 45.115719569182396, -73.47703677717703 45.1154062020635, -73.47433042478657 45.115263762464004, -73.47484320734478 45.115719569182396, -73.47538447782286 45.11842592157285, -73.47413100934729 45.120106708846926, -73.47094036231853 45.12004973300712, -73.4708042649504 45.12261960389417, -73.4679554767237 45.12323684134329, -73.46501172888945 45.12261960389417, -73.46154570321363 45.123046922128175, -73.45855447557561 45.121527568407274, -73.45931415243606 45.11948593684481, -73.45803219773404 45.11734934567479, -73.46012130910029 45.114690476663206, -73.46045366772674 45.11369340078386, -73.45890031766238 45.11094841052457, -73.45781463537739 45.10877704595459, -73.45753141391174 45.10726653147112, -73.45696497098045 45.10405668819375, -73.46238158151098 45.101257516041564, -73.4652255970619 45.10061082702834, -73.4664080560344 45.10185657745563 ))");
		expectedCatchments.put("P2", "POLYGON (( -73.46455294608097 45.104443757530134, -73.46629394434744 45.10824683192499, -73.46564160921722 45.11175974831636, -73.46339741556099 45.11302868353096, -73.46045366772674 45.11369340078386, -73.45890031766238 45.11094841052457, -73.45781463537739 45.10877704595459, -73.45753141391174 45.10726653147112, -73.45918353912803 45.10622805276373, -73.46455294608097 45.104443757530134 ))");
		expectedCatchments.put("P3", "POLYGON (( -73.4676176399161 45.10548532910072, -73.46738941654219 45.105074527027696, -73.46684168044482 45.104321389893805, -73.46667088788585 45.10341487554239, -73.46654499005874 45.10274664861386, -73.46745788355436 45.10222173485388, -73.46864464509866 45.10217609017909, -73.46983140664298 45.10217609017909, -73.47106381286207 45.102929227312984, -73.47181694999595 45.10272382627647, -73.473163467902 45.10272382627647, -73.47457845282021 45.103317207048626, -73.47512618891759 45.10423010054424, -73.4753544122915 45.10525710572682, -73.47599343773844 45.105576618450286, -73.47624448344973 45.10639822259635, -73.47612516374025 45.107087729452836, -73.47578803670191 45.1074708724537, -73.47521355030347 45.10794236704982, -73.47438740062638 45.108426661688114, -73.47368838166199 45.108885857371924, -73.47288959985332 45.109182547757996, -73.4722049297316 45.10925101477017, -73.47102582607823 45.1091958355254, -73.47056172143948 45.10925101477017, -73.46982933344245 45.109053395925905, -73.46928367054561 45.108589166985844, -73.46912391418387 45.10790449686413, -73.46869028977345 45.10813272023803, -73.46831947368777 45.10814178248912, -73.46798279731435 45.10813272023803, -73.46782304095261 45.10801860855108, -73.46707833748302 45.10751199007468, -73.46718401550568 45.107105715055454, -73.4671383708309 45.106603623632864, -73.46727530485524 45.106238466234615, -73.4675948175787 45.10596459818593, -73.467978455945 45.105843612664195, -73.4676176399161 45.10548532910072 ))");
		expectedCatchments.put("P4", "POLYGON (( -73.47438740062638 45.108426661688114, -73.47521355030347 45.10794236704982, -73.47578803670191 45.1074708724537, -73.47612516374025 45.107087729452836, -73.47624448344973 45.10639822259635, -73.48008498460628 45.10591972473696, -73.4848139793096 45.108540613367715, -73.48757730753987 45.11090511071937, -73.48717847666127 45.11489341950531, -73.48358899875393 45.115719569182396, -73.47703677717703 45.1154062020635, -73.47433042478657 45.115263762464004, -73.47320822109108 45.11425377913806, -73.47233627039361 45.11346902351033, -73.47452470185075 45.112175703542384, -73.47376066638859 45.11013593688209, -73.47368838166199 45.108885857371924, -73.47438740062638 45.108426661688114 ))");
		expectedCatchments.put("P5", "POLYGON (( -73.45931415243606 45.11948593684481, -73.45803219773404 45.11734934567479, -73.46012130910029 45.114690476663206, -73.46045366772674 45.11369340078386, -73.46339741556099 45.11302868353096, -73.46486928947812 45.11397827960653, -73.46672100182546 45.11445307764431, -73.4685416483889 45.11506456249201, -73.47076943479914 45.115092834944605, -73.47320822109108 45.11425377913806, -73.47433042478657 45.115263762464004, -73.47484320734478 45.115719569182396, -73.47538447782286 45.11842592157285, -73.47413100934729 45.120106708846926, -73.47094036231853 45.12004973300712, -73.4708042649504 45.12261960389417, -73.4679554767237 45.12323684134329, -73.46501172888945 45.12261960389417, -73.46154570321363 45.123046922128175, -73.45855447557561 45.121527568407274, -73.45931415243606 45.11948593684481 ))");
		
		WKTReader reader = new WKTReader(BasicTestSuite.GF);
		
		for (Pourpoint point : results.getPoints()) {
			DrainageArea actual = results.getCatchment(point);
			Geometry expected = GeotoolsGeometryReprojector.reproject(reader.read(expectedCatchments.get(point.getId())), ChyfDatastore.BASE_SRS);
			Assert.assertTrue("Pourpoint catchment incorrect (" + point.getId() + ")", expected.equalsExact(actual.getGeometry(), 0.00001));
		}
		
		
		//test non-overlapping combined coverages
		HashMap<String, String> expectedUniqueCoveratesCombined = new HashMap<>();
		expectedUniqueCoveratesCombined.put("P1", "POLYGON (( -73.46455294608097 45.104443757530134, -73.45918353912803 45.10622805276373, -73.45753141391174 45.10726653147112, -73.45696497098045 45.10405668819375, -73.46238158151098 45.101257516041564, -73.4652255970619 45.10061082702834, -73.4664080560344 45.10185657745563, -73.46654499005874 45.10274664861386, -73.46667088788585 45.10341487554239, -73.46684168044482 45.104321389893805, -73.46738941654219 45.105074527027696, -73.4676176399161 45.10548532910072, -73.467978455945 45.105843612664195, -73.4675948175787 45.10596459818593, -73.46727530485524 45.106238466234615, -73.4671383708309 45.106603623632864, -73.46718401550568 45.107105715055454, -73.46707833748302 45.10751199007468, -73.46782304095261 45.10801860855108, -73.46798279731435 45.10813272023803, -73.46831947368777 45.10814178248912, -73.46869028977345 45.10813272023803, -73.46912391418387 45.10790449686413, -73.46928367054561 45.108589166985844, -73.46982933344245 45.109053395925905, -73.47056172143948 45.10925101477017, -73.47102582607823 45.1091958355254, -73.4722049297316 45.10925101477017, -73.47288959985332 45.109182547757996, -73.47368838166199 45.108885857371924, -73.47376066638859 45.11013593688209, -73.47452470185075 45.112175703542384, -73.47233627039361 45.11346902351033, -73.47320822109108 45.11425377913806, -73.47076943479914 45.115092834944605, -73.4685416483889 45.11506456249201, -73.46672100182546 45.11445307764431, -73.46486928947812 45.11397827960653, -73.46339741556099 45.11302868353096, -73.46564160921722 45.11175974831636, -73.46629394434744 45.10824683192499, -73.46455294608097 45.104443757530134 ))");
		expectedUniqueCoveratesCombined.put("P2", "POLYGON (( -73.46455294608097 45.104443757530134, -73.46629394434744 45.10824683192499, -73.46564160921722 45.11175974831636, -73.46339741556099 45.11302868353096, -73.46045366772674 45.11369340078386, -73.45890031766238 45.11094841052457, -73.45781463537739 45.10877704595459, -73.45753141391174 45.10726653147112, -73.45918353912803 45.10622805276373, -73.46455294608097 45.104443757530134 ))");
		expectedUniqueCoveratesCombined.put("P3", "POLYGON (( -73.4676176399161 45.10548532910072, -73.46738941654219 45.105074527027696, -73.46684168044482 45.104321389893805, -73.46667088788585 45.10341487554239, -73.46654499005874 45.10274664861386, -73.46745788355436 45.10222173485388, -73.46864464509866 45.10217609017909, -73.46983140664298 45.10217609017909, -73.47106381286207 45.102929227312984, -73.47181694999595 45.10272382627647, -73.473163467902 45.10272382627647, -73.47457845282021 45.103317207048626, -73.47512618891759 45.10423010054424, -73.4753544122915 45.10525710572682, -73.47599343773844 45.105576618450286, -73.47624448344973 45.10639822259635, -73.47612516374025 45.107087729452836, -73.47578803670191 45.1074708724537, -73.47521355030347 45.10794236704982, -73.47438740062638 45.108426661688114, -73.47368838166199 45.108885857371924, -73.47288959985332 45.109182547757996, -73.4722049297316 45.10925101477017, -73.47102582607823 45.1091958355254, -73.47056172143948 45.10925101477017, -73.46982933344245 45.109053395925905, -73.46928367054561 45.108589166985844, -73.46912391418387 45.10790449686413, -73.46869028977345 45.10813272023803, -73.46831947368777 45.10814178248912, -73.46798279731435 45.10813272023803, -73.46782304095261 45.10801860855108, -73.46707833748302 45.10751199007468, -73.46718401550568 45.107105715055454, -73.4671383708309 45.106603623632864, -73.46727530485524 45.106238466234615, -73.4675948175787 45.10596459818593, -73.467978455945 45.105843612664195, -73.4676176399161 45.10548532910072 ))");
		expectedUniqueCoveratesCombined.put("P4", "POLYGON (( -73.47438740062638 45.108426661688114, -73.47521355030347 45.10794236704982, -73.47578803670191 45.1074708724537, -73.47612516374025 45.107087729452836, -73.47624448344973 45.10639822259635, -73.48008498460628 45.10591972473696, -73.4848139793096 45.108540613367715, -73.48757730753987 45.11090511071937, -73.48717847666127 45.11489341950531, -73.48358899875393 45.115719569182396, -73.47703677717703 45.1154062020635, -73.47433042478657 45.115263762464004, -73.47320822109108 45.11425377913806, -73.47233627039361 45.11346902351033, -73.47452470185075 45.112175703542384, -73.47376066638859 45.11013593688209, -73.47368838166199 45.108885857371924, -73.47438740062638 45.108426661688114 ))");
		expectedUniqueCoveratesCombined.put("P5", "POLYGON (( -73.45931415243606 45.11948593684481, -73.45803219773404 45.11734934567479, -73.46012130910029 45.114690476663206, -73.46045366772674 45.11369340078386, -73.46339741556099 45.11302868353096, -73.46486928947812 45.11397827960653, -73.46672100182546 45.11445307764431, -73.4685416483889 45.11506456249201, -73.47076943479914 45.115092834944605, -73.47320822109108 45.11425377913806, -73.47433042478657 45.115263762464004, -73.47484320734478 45.115719569182396, -73.47538447782286 45.11842592157285, -73.47413100934729 45.120106708846926, -73.47094036231853 45.12004973300712, -73.4708042649504 45.12261960389417, -73.4679554767237 45.12323684134329, -73.46501172888945 45.12261960389417, -73.46154570321363 45.123046922128175, -73.45855447557561 45.121527568407274, -73.45931415243606 45.11948593684481 ))");
				
		for (Pourpoint point : results.getPoints()) {
			DrainageArea actual = results.getNonOverlappingCatchments(point);
			Geometry expected = GeotoolsGeometryReprojector.reproject(reader.read(expectedUniqueCoveratesCombined.get(point.getId())), ChyfDatastore.BASE_SRS);
			Assert.assertTrue("Pourpoint non-overlapping catchment incorrect (" + point.getId() + ")", expected.equalsExact(actual.getGeometry(), 0.00001));
		}
		
		//test non-overlapping single coverages
		HashMap<String, String> expectedMergedCoverages = new HashMap<>();
		expectedMergedCoverages.put("P1|P2|", "POLYGON (( -73.46455294608097 45.10444375753015, -73.45918353912803 45.10622805276376, -73.45753141391174 45.10726653147111, -73.45696497098045 45.10405668819373, -73.46238158151098 45.10125751604159, -73.4652255970619 45.100610827028326, -73.4664080560344 45.101856577455656, -73.46455294608097 45.10444375753015 ))");
		expectedMergedCoverages.put("P1|P3|P2", "POLYGON (( -73.46707833748302 45.10751199007466, -73.46686658977292 45.10814178248914, -73.4666386864137 45.108341197928425, -73.46629394434744 45.10824683192497, -73.46455294608097 45.10444375753015, -73.4664080560344 45.101856577455656, -73.46654499005874 45.10274664861382, -73.46667088788585 45.103414875542406, -73.46684168044482 45.10432138989377, -73.4673894165422 45.10507452702768, -73.4676176399161 45.105485329100766, -73.467978455945 45.10584361266417, -73.4675948175787 45.10596459818589, -73.46727530485524 45.10623846623458, -73.4671383708309 45.10660362363286, -73.46718401550568 45.107105715055475, -73.46707833748302 45.10751199007466 ))");
		expectedMergedCoverages.put("P1|P4_P5|P3", "POLYGON (( -73.46564160921722 45.11175974831633, -73.46629394434744 45.10824683192497, -73.4666386864137 45.108341197928425, -73.46686658977292 45.10814178248914, -73.46707833748302 45.10751199007466, -73.46782304095261 45.1080186085511, -73.46798279731436 45.10813272023806, -73.46831947368777 45.10814178248914, -73.46869028977345 45.10813272023806, -73.46912391418388 45.107904496864094, -73.46928367054561 45.108589166985816, -73.46982933344245 45.109053395925955, -73.47056172143948 45.10925101477017, -73.47102582607823 45.10919583552539, -73.47220492973159 45.10925101477017, -73.47288959985332 45.10918254775798, -73.47368838166199 45.10888585737189, -73.47376066638859 45.110135936882116, -73.47452470185077 45.11217570354236, -73.47233627039363 45.113469023510326, -73.47320822109107 45.114253779138096, -73.47076943479914 45.11509283494458, -73.4685416483889 45.115064562491945, -73.46672100182545 45.11445307764433, -73.46486928947812 45.113978279606485, -73.46339741556099 45.113028683530985, -73.46564160921722 45.11175974831633 ))");
		expectedMergedCoverages.put("P2||", "POLYGON (( -73.46455294608097 45.10444375753015, -73.46629394434744 45.10824683192497, -73.46564160921722 45.11175974831633, -73.46339741556099 45.113028683530985, -73.46045366772674 45.11369340078384, -73.4589003176624 45.11094841052455, -73.45781463537739 45.10877704595456, -73.45753141391174 45.10726653147111, -73.45918353912803 45.10622805276376, -73.46455294608097 45.10444375753015 ))");
		expectedMergedCoverages.put("P3||", "POLYGON (( -73.4676176399161 45.105485329100766, -73.4673894165422 45.10507452702768, -73.46684168044482 45.10432138989377, -73.46667088788585 45.103414875542406, -73.46654499005874 45.10274664861382, -73.46745788355437 45.10222173485384, -73.46864464509866 45.10217609017906, -73.46983140664298 45.10217609017906, -73.47106381286207 45.10292922731303, -73.47181694999595 45.10272382627644, -73.473163467902 45.10272382627644, -73.47457845282021 45.10331720704862, -73.47512618891759 45.104230100544235, -73.4753544122915 45.10525710572684, -73.47599343773844 45.10557661845027, -73.47624448344973 45.106398222596376, -73.47612516374025 45.10708772945284, -73.47578803670191 45.10747087245369, -73.47521355030347 45.107942367049844, -73.47438740062638 45.10842666168814, -73.47368838166199 45.10888585737189, -73.47288959985332 45.10918254775798, -73.47220492973159 45.10925101477017, -73.47102582607823 45.10919583552539, -73.47056172143948 45.10925101477017, -73.46982933344245 45.109053395925955, -73.46928367054561 45.108589166985816, -73.46912391418388 45.107904496864094, -73.46869028977345 45.10813272023806, -73.46831947368777 45.10814178248914, -73.46798279731436 45.10813272023806, -73.46782304095261 45.1080186085511, -73.46707833748302 45.10751199007466, -73.46718401550568 45.107105715055475, -73.4671383708309 45.10660362363286, -73.46727530485524 45.10623846623458, -73.4675948175787 45.10596459818589, -73.467978455945 45.10584361266417, -73.4676176399161 45.105485329100766 ))");
		expectedMergedCoverages.put("P4||", "POLYGON (( -73.47438740062638 45.10842666168814, -73.47521355030347 45.107942367049844, -73.47578803670191 45.10747087245369, -73.47612516374025 45.10708772945284, -73.47624448344973 45.106398222596376, -73.48008498460628 45.10591972473701, -73.48481397930962 45.108540613367694, -73.48757730753987 45.11090511071941, -73.48717847666127 45.11489341950532, -73.48358899875393 45.11571956918244, -73.47703677717703 45.115406202063525, -73.47433042478657 45.11526376246401, -73.47320822109107 45.114253779138096, -73.47233627039363 45.113469023510326, -73.47452470185077 45.11217570354236, -73.47376066638859 45.110135936882116, -73.47368838166199 45.10888585737189, -73.47438740062638 45.10842666168814 ))");
		expectedMergedCoverages.put("P5||", "POLYGON (( -73.45931415243606 45.11948593684484, -73.45803219773404 45.11734934567477, -73.4601213091003 45.11469047666323, -73.46045366772674 45.11369340078384, -73.46339741556099 45.113028683530985, -73.46486928947812 45.113978279606485, -73.46672100182545 45.11445307764433, -73.4685416483889 45.115064562491945, -73.47076943479914 45.11509283494458, -73.47320822109107 45.114253779138096, -73.47433042478657 45.11526376246401, -73.47484320734478 45.11571956918242, -73.47538447782284 45.11842592157284, -73.47413100934729 45.120106708846954, -73.47094036231852 45.12004973300711, -73.4708042649504 45.12261960389417, -73.4679554767237 45.12323684134334, -73.46501172888945 45.12261960389417, -73.46154570321363 45.1230469221282, -73.45855447557561 45.1215275684073, -73.45931415243606 45.11948593684484 ))");
			
		for (Pourpoint point : results.getPoints()) {
			for (UniqueSubCatchment pcat : point.getTraversalCompliantCatchments()) {
				Geometry expected = GeotoolsGeometryReprojector.reproject(reader.read(expectedMergedCoverages.get(pcat.getId())), ChyfDatastore.BASE_SRS);
				if (!pcat.getDrainageArea().getGeometry().equalsExact(expected, 0.0001)) {
					Assert.fail("Pourpoint tranversal compliant catchments polygon incorrect (pointid:" + point.getId() + " subcatchment: " + pcat.getId() + ")");

				}
			}
		}
		
		Integer[][] catRel = results.getTraversalCompliantCatchmentRelationship();
		Integer[][] expectedCatRel = new Integer[][]{
			new Integer[]{null,-1,-1,-1,-1,-1,-1},
			new Integer[]{1,null,-1,null,-1,-1,-1},
			new Integer[]{1,1,null,null,null,-1,-1},
			new Integer[]{1,null,null,null,null,null,null},
			new Integer[]{1,1,null,null,null,null,null},
			new Integer[]{1,1,1,null,null,null,null},
			new Integer[]{1,1,1,null,null,null,null}
		};
				
		for (int i = 0; i < expectedCatRel.length; i ++) {
			for (int j = 0; j < expectedCatRel.length; j ++) {
				Assert.assertEquals("Catchment relationship matrix incorrect (" + results.getTraversalCompliantCatchments().get(i).getId() + " to " + results.getTraversalCompliantCatchments().get(j).getId() + ")", expectedCatRel[i][j],catRel[i][j]);
			}
		}
		
		Double[][] actualDistances = results.getProjectedPourpointMinDistanceMatrix();
		Double[][] expectedDistances = new Double[][]{
			new Double[]{null,-395.82822539062494,-795.773832897013,-1759.582034487193,-1656.453622900341},
			new Double[]{395.82822539062494,null,-399.94560750638806,-1363.753809096568,-1260.625397509716},
			new Double[]{795.773832897013,399.94560750638806,null,-963.8082015901799,-860.6797900033281},
			new Double[]{1759.582034487193,1363.753809096568,963.8082015901799,null,null},
			new Double[]{1656.453622900341,1260.625397509716,860.6797900033281,null,null}

		};
		for (int i = 0; i < actualDistances.length; i ++) {
			for (int j = 0; j < actualDistances.length; j ++) {
				Assert.assertEquals("Minimum pourpoint distance matrix incorrect", expectedDistances[i][j],actualDistances[i][j]);
			}
		}
		
		//max distance matrix should be the same as the min distance matrix
		actualDistances = results.getProjectedPourpointMaxDistanceMatrix();
		for (int i = 0; i < actualDistances.length; i ++) {
			for (int j = 0; j < actualDistances.length; j ++) {
				Assert.assertEquals("Maximum pourpoint distance matrix incorrect", expectedDistances[i][j],actualDistances[i][j]);
			}
		}
	}
}
