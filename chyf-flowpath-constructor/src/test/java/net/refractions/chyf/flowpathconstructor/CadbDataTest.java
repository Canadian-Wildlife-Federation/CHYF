/*
 * Copyright 2019 Government of Canada
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */
package net.refractions.chyf.flowpathconstructor;

import java.util.ArrayList;
import java.util.List;

import org.junit.Assert;
import org.junit.Test;
import org.locationtech.jts.geom.Coordinate;
import org.locationtech.jts.geom.GeometryFactory;
import org.locationtech.jts.geom.LineString;
import org.locationtech.jts.geom.Polygon;
import org.locationtech.jts.geom.prep.PreparedPolygon;
import org.locationtech.jts.io.WKTReader;

import net.refractions.chyf.datasource.FlowDirection;
import net.refractions.chyf.flowpathconstructor.ChyfProperties.Property;
import net.refractions.chyf.flowpathconstructor.datasource.FlowpathGeoPackageDataSource.NodeType;
import net.refractions.chyf.flowpathconstructor.skeletonizer.points.ConstructionPoint;
import net.refractions.chyf.flowpathconstructor.skeletonizer.points.PolygonInfo;
import net.refractions.chyf.flowpathconstructor.skeletonizer.voronoi.SkeletonGenerator;
import net.refractions.chyf.flowpathconstructor.skeletonizer.voronoi.SkeletonResult;

/**
 * Test cases for skeletonizer.  This does not test the output to 
 * ensure it is valid, it just runs tests and ensure a result is returned.
 * 
 * @author Emily
 *
 */
public class CadbDataTest {

	private WKTReader reader = new WKTReader();
	
	private SkeletonGenerator createGenerator(double densify, double simplify, double minsize) {
		ChyfProperties prop = new ChyfProperties();
		prop.setProperty(Property.SKEL_DENSIFY_FACTOR, densify);
		prop.setProperty(Property.SKEL_SIMPLIFY_FACTOR, simplify);
		prop.setProperty(Property.SKEL_MINSIZE, minsize);
		prop.setProperty(Property.SKEL_ACUTE_ANGLE, 30.0);
		SkeletonGenerator gen = new SkeletonGenerator(prop);
		return gen;
	}
	
	@Test
	public void testNoNode() throws Exception{
		String waterbody = "Polygon ((623598.49390159524045885 5202508.60919110756367445, 623607.83851769159082323 5202507.93580232001841068, 623626.65988250868394971 5202510.49389216862618923, 623629.14633347513154149 5202509.50045129936188459, 623634.40575730963610113 5202503.97317610122263432, 623638.93306112813297659 5202502.18828425742685795, 623644.273905586800538 5202501.90995285008102655, 623658.2113364040851593 5202503.99998982064425945, 623661.13095776934642345 5202503.77150625828653574, 623670.39397969876881689 5202497.86039148364216089, 623682.37401821103412658 5202487.54771958570927382, 623684.69727542856708169 5202486.35080862510949373, 623688.13997432682663202 5202485.85526362713426352, 623704.1524073495529592 5202488.44425656739622355, 623713.36079901340417564 5202493.23779513034969568, 623728.72535558184608817 5202503.57311534602195024, 623732.6078735199989751 5202505.35460348334163427, 623739.69749500486068428 5202505.5239838408306241, 623746.25301464775111526 5202503.19206572975963354, 623764.72258537169545889 5202472.8368008304387331, 623766.72986270650289953 5202468.16483950801193714, 623766.63836428872309625 5202466.70660552568733692, 623765.42881429567933083 5202448.34946872387081385, 623761.36696302751079202 5202425.87539631593972445, 623762.63869551522657275 5202416.30777694936841726, 623766.08568228990770876 5202409.37558875419199467, 623766.71483983658254147 5202406.56491761561483145, 623764.90594221267383546 5202400.94660384673625231, 623763.99838029546663165 5202398.10403145011514425, 623763.80486489762552083 5202388.36147367302328348, 623766.6752732916502282 5202383.90753674134612083, 623776.20327368553262204 5202375.51185642089694738, 623773.78520932735409588 5202376.50665865000337362, 623769.9548994874348864 5202378.07246445119380951, 623763.82751069031655788 5202384.33756975829601288, 623761.06981466664001346 5202390.32800133526325226, 623758.27956252580042928 5202400.82016556710004807, 623757.4039647780591622 5202404.13710635248571634, 623752.61459609551820904 5202411.94191629160195589, 623735.11975530150812119 5202424.6635684659704566, 623730.09326052467804402 5202427.02723429352045059, 623726.36535683472175151 5202427.69471048004925251, 623710.73244738567154855 5202425.51375326979905367, 623701.16223782568704337 5202422.74713658820837736, 623693.38785142824053764 5202418.89497192017734051, 623689.57188720942940563 5202417.93755470588803291, 623665.71433424926362932 5202422.6009457316249609, 623651.39750831993296742 5202423.74920795019716024, 623647.44414796214550734 5202423.17806482780724764, 623644.97147255833260715 5202421.30358689092099667, 623628.70969526143744588 5202399.89954859483987093, 623626.66966561891604215 5202393.30930608883500099, 623625.92353126138914376 5202379.37529344018548727, 623611.03137212502770126 5202375.23113016039133072, 623602.62566174170933664 5202370.6211573788896203, 623594.83065557957161218 5202368.4918406717479229, 623591.20024444023147225 5202368.8612629808485508, 623583.43507168639916927 5202372.63572915084660053, 623578.15822161454707384 5202373.86039431206882, 623564.30947320815175772 5202372.98415301647037268, 623552.53120857442263514 5202375.76388928294181824, 623539.97475381137337536 5202372.02405531425029039, 623520.30427149101160467 5202375.5296851359307766, 623511.06963178282603621 5202375.29389977268874645, 623497.78923918015789241 5202370.12729460466653109, 623483.37517983198631555 5202368.25011581741273403, 623463.46616767370142043 5202360.48943703155964613, 623456.62265701638534665 5202356.14548384491354227, 623447.19119538459926844 5202352.18151724990457296, 623439.46193314483389258 5202347.24115898460149765, 623429.00028124579694122 5202345.24584129173308611, 623426.18419153825379908 5202347.45541570801287889, 623424.4466149837244302 5202356.7577497586607933, 623421.70700016047339886 5202362.62641216348856688, 623417.89048632781486958 5202366.47171739302575588, 623411.05305627116467804 5202369.55411901045590639, 623409.65961285529192537 5202372.16001122631132603, 623410.19053736550267786 5202377.39600506238639355, 623413.93879076826851815 5202383.46567300613969564, 623417.05501996225211769 5202391.75678326841443777, 623416.49704100680537522 5202405.10790330078452826, 623421.02323989139404148 5202409.62617977894842625, 623422.48402380780316889 5202412.95817892160266638, 623423.34713033563457429 5202418.32333905436098576, 623421.86779833422042429 5202428.38697839435189962, 623418.75036754482425749 5202439.27271816972643137, 623415.72745442669838667 5202455.15196309890598059, 623415.58852870541159064 5202462.23063631448894739, 623415.52850539516657591 5202465.49780108500272036, 623420.03969627059996128 5202475.88556133862584829, 623429.79735457187052816 5202489.81710783392190933, 623434.52843897964339703 5202500.6096469834446907, 623445.80094309384003282 5202500.18714473582804203, 623466.87168477626983076 5202497.7664037337526679, 623491.08460971456952393 5202497.96774150803685188, 623506.37723970517981797 5202495.99442293494939804, 623516.6119639981770888 5202496.80678023211658001, 623534.05708395247347653 5202496.73467424418777227, 623546.75908446498215199 5202495.27474720124155283, 623559.4412422034656629 5202492.56932693719863892, 623571.24218416085932404 5202494.19243178889155388, 623580.29667489172425121 5202499.07150767836719751, 623582.55243054940365255 5202502.23104006703943014, 623583.60769702936522663 5202511.53564743883907795, 623584.82974812178872526 5202513.52869715262204409, 623586.75235633063130081 5202514.76919367723166943, 623591.68192659679334611 5202514.50452405028045177, 623598.49390159524045885 5202508.60919110756367445))";
		Polygon polygon = (Polygon)reader.read(waterbody);
		polygon.setUserData(new PolygonInfo(null, "1"));
		
		List<ConstructionPoint> expected = new ArrayList<>();
		
		expected.add(new ConstructionPoint(new Coordinate(623415.58852870541159064, 5202462.23063631448894739), NodeType.FLOWPATH, FlowDirection.UNKNOWN, null));
		expected.add(new ConstructionPoint(new Coordinate(623591.68192659679334611, 5202514.50452405028045177),	NodeType.BANK, FlowDirection.INPUT, null));
		expected.add(new ConstructionPoint(new Coordinate(623773.78520932735409588, 5202376.50665865000337362), NodeType.FLOWPATH, FlowDirection.UNKNOWN, null));
		expected.add(new ConstructionPoint(new Coordinate(623762.63869551522657275, 5202416.30777694936841726), NodeType.BANK, FlowDirection.INPUT, null));
		expected.add(new ConstructionPoint(new Coordinate(623766.63836428872309625, 5202466.70660552568733692), NodeType.FLOWPATH, FlowDirection.UNKNOWN, null));
		expected.add(new ConstructionPoint(new Coordinate(623564.30947320815175772, 5202372.98415301647037268), NodeType.BANK, FlowDirection.INPUT, null));
				
		SkeletonGenerator gen = createGenerator(.75, .25, 1);
		SkeletonResult results = gen.generateSkeleton(polygon,  expected);
		results.getSkeletons().forEach(e->System.out.println(e.getLineString().toText()));
		results.getErrors().forEach(e->System.out.println(e));
		Assert.assertTrue("Skeleton returned errors", results.getErrors().isEmpty());
	}
	
	@Test
	public void testNoNode2() throws Exception{
		String waterbody = "Polygon ((597882.62222479295451194 5252925.82603208720684052, 597899.88119655393529683 5252918.74384881742298603, 597912.94905333919450641 5252914.61541577335447073, 597922.32262844452634454 5252909.43600570037961006, 597930.12729494110681117 5252907.85434556379914284, 597935.56448955822270364 5252905.73294597771018744, 597943.56150469288695604 5252900.76403600908815861, 597965.04358040541410446 5252884.7594292676076293, 597986.04719588649459183 5252875.72795879561454058, 597996.01235748082399368 5252870.36956432927399874, 597998.94988927023950964 5252867.49503119569271803, 598001.62032103608362377 5252862.0926329679787159, 598006.06347892491612583 5252859.86576409731060266, 598012.97413439466618001 5252859.87003003992140293, 598033.29669850238133222 5252864.06689137686043978, 598048.39924496016465127 5252865.50867819227278233, 598056.04800329438876361 5252865.13625714275985956, 598060.80465792480390519 5252864.01518434938043356, 598079.9595157866133377 5252859.53307469096034765, 598084.16387820092495531 5252857.60241334605962038, 598088.08891603210940957 5252853.87735673505812883, 598091.45879440393764526 5252852.22177543304860592, 598099.75599710550159216 5252850.97094446606934071, 598111.07642776158172637 5252850.74891070928424597, 598118.6053331958828494 5252846.7172938659787178, 598125.99930908752139658 5252847.59684804826974869, 598133.56673227739520371 5252842.16523641441017389, 598143.15025446633808315 5252840.69141947943717241, 598149.17194002750329673 5252837.01258696336299181, 598160.29537473735399544 5252827.37181874737143517, 598168.8772574634058401 5252821.73489492200314999, 598177.66092920885421336 5252812.15506124496459961, 598184.51615168317221105 5252797.44057486113160849, 598190.90506481321062893 5252789.85497861169278622, 598195.50852107105311006 5252787.97553817834705114, 598205.88220335578080267 5252788.88282260112464428, 598210.99539039249066263 5252787.20090278144925833, 598216.97636557836085558 5252782.35424063168466091, 598229.56400376302190125 5252767.73575508594512939, 598250.07766683353111148 5252753.77246679179370403, 598255.56325943022966385 5252751.02965164929628372, 598266.71923405060078949 5252748.02607394568622112, 598277.66550175857264549 5252743.12922753859311342, 598282.92680874897632748 5252741.61659442260861397, 598297.94562425080221146 5252740.86769388243556023, 598305.07498621218837798 5252742.68792623747140169, 598315.17032735189422965 5252746.70331382192671299, 598326.18536751682404429 5252745.80959128774702549, 598336.63667749566957355 5252749.7420504679903388, 598349.02612679835874587 5252749.67178026959300041, 598357.14829727087635547 5252747.17334316857159138, 598373.99758700747042894 5252736.69517031963914633, 598380.27168177533894777 5252734.17689891159534454, 598385.47444442170672119 5252733.90840558614581823, 598393.59970596188213676 5252733.47770961653441191, 598405.37210984667763114 5252732.86362619139254093, 598408.51641203020699322 5252732.97193824779242277, 598418.56743265897966921 5252733.32948426995426416, 598432.78086851537227631 5252730.22187051363289356, 598438.16159102751407772 5252729.6896165618672967, 598441.66803772747516632 5252729.34825125709176064, 598454.19494560931343585 5252730.98130876757204533, 598463.38147842744365335 5252730.70191153232008219, 598472.7382994027575478 5252731.51478846091777086, 598489.9126652890117839 5252730.90259791165590286, 598498.3890095641836524 5252733.37930661905556917, 598498.6879125558771193 5252733.55106917582452297, 598504.70405451441183686 5252736.96473020501434803, 598505.96717452618759125 5252737.67514781840145588, 598513.41174976620823145 5252740.49028173834085464, 598523.23930121108423918 5252742.92301362752914429, 598526.32714687508996576 5252743.69742221012711525, 598536.76815051259472966 5252743.2946910634636879, 598542.72631983924657106 5252742.07189945224672556, 598543.26299030240625143 5252741.11378924734890461, 598543.64993028796743602 5252740.0864664800465107, 598543.86432554130442441 5252739.00066434312611818, 598543.9127853405661881 5252737.91207557637244463, 598543.78776707244105637 5252736.82057351060211658, 598543.48871074814815074 5252735.75949781015515327, 598543.03014145628549159 5252734.76244149543344975, 598542.4269575661746785 5252733.84077115077525377, 598541.78565597801934928 5252733.84111802186816931, 598509.58318822563160211 5252729.00951570365577936, 598507.61879747675266117 5252728.27620856370776892, 598502.40053325844928622 5252726.32106373272836208, 598502.0407300362130627 5252726.18162775970995426, 598498.28155515226535499 5252723.15046094171702862, 598495.43070176686160266 5252718.14471629541367292, 598495.47208053804934025 5252713.43207862135022879, 598497.54694121552165598 5252709.83185940887778997, 598499.51437398290727288 5252708.58650374691933393, 598504.05163392680697143 5252705.71683415956795216, 598516.47274782427120954 5252702.86835822183638811, 598532.02211975702084601 5252693.4470893582329154, 598531.90898104547522962 5252693.44518962036818266, 598529.75142976804636419 5252693.43119482789188623, 598513.43991735845338553 5252698.8155558230355382, 598505.37306909146718681 5252699.35823175776749849, 598498.42828134878072888 5252700.47557047475129366, 598494.54242208413779736 5252701.84435457736253738, 598493.60890356835443527 5252702.17329247388988733, 598488.55856538005173206 5252705.04547492600977421, 598480.75527353165671229 5252712.36246414948254824, 598470.52367346757091582 5252715.57013014238327742, 598467.90837637870572507 5252714.95931003615260124, 598466.3542339582927525 5252710.90911316964775324, 598464.11579233163502067 5252709.8710809713229537, 598451.85636567324399948 5252717.92482958827167749, 598437.16492766898591071 5252720.29070087615400553, 598435.53070463379845023 5252720.56342802010476589, 598422.77173593314364552 5252724.21789934299886227, 598414.43052036198787391 5252724.47818837035447359, 598409.22999495663680136 5252723.71287380531430244, 598399.50627836701460183 5252722.28254740405827761, 598392.21987397479824722 5252725.32852563448250294, 598391.84200174978468567 5252725.36665501724928617, 598389.37717189383693039 5252725.68104947917163372, 598386.16191232379060239 5252725.30476584751158953, 598383.57892126601655036 5252725.01689904276281595, 598377.54108777071814984 5252722.89249683450907469, 598367.4948781852144748 5252724.9473485890775919, 598358.20517844601999968 5252723.27980690635740757, 598355.40577583620324731 5252724.20000634901225567, 598347.87970992433838546 5252728.94282200280576944, 598337.70231972797773778 5252731.17338696680963039, 598325.45809319603722543 5252729.77875876985490322, 598309.63527120393700898 5252731.6813355078920722, 598298.2997601421084255 5252727.83416126202791929, 598293.98243387322872877 5252725.23843206744641066, 598290.99323869869112968 5252722.17583377007395029, 598285.56505692773498595 5252714.28124371264129877, 598283.40187420044094324 5252708.29777186363935471, 598287.57134029024746269 5252688.19145559798926115, 598287.00122143456246704 5252682.59038895089179277, 598282.15543335594702512 5252672.8046651054173708, 598281.27151325100567192 5252668.82132875267416239, 598282.13000663404818624 5252662.61055890470743179, 598285.77110529248602688 5252649.2763577476143837, 598285.52521545090712607 5252643.23606885690242052, 598283.31584269611630589 5252640.0086761936545372, 598281.05610671744216233 5252638.4367749709635973, 598270.12293705192860216 5252633.52923216670751572, 598261.55251121218316257 5252632.15180250909179449, 598259.94505748513620347 5252629.92385202087461948, 598258.9859356670640409 5252623.6715285973623395, 598255.7186931612668559 5252619.63717417512089014, 598250.57797152653802186 5252615.29354570992290974, 598245.09998344094492495 5252612.16707214806228876, 598239.12383180961478502 5252610.85534273367375135, 598234.03181061323266476 5252612.61541118379682302, 598216.0912526041502133 5252622.47544017154723406, 598205.11000007227994502 5252631.70718935690820217, 598197.22188323631417006 5252639.60117622371762991, 598176.00368231278844178 5252655.97622760944068432, 598173.34190577443223447 5252656.78765309602022171, 598167.51974580273963511 5252656.6457864111289382, 598141.59315869200509042 5252670.35208895243704319, 598119.39023335697129369 5252677.05078025627881289, 598111.02117639244534075 5252680.77933024987578392, 598104.96773943607695401 5252685.44702732935547829, 598094.40552432520780712 5252698.96576664876192808, 598087.36590149998664856 5252703.5058320676907897, 598080.97464574908372015 5252705.36659198254346848, 598066.5147901326417923 5252706.52557834703475237, 598057.60068956681061536 5252708.11075939331203699, 598036.09433689014986157 5252718.28969158791005611, 598024.44550524628721178 5252721.89686999097466469, 597992.34150730480905622 5252721.53852518554776907, 597987.83825554640498012 5252720.12936680857092142, 597979.84945350664202124 5252714.6490203682333231, 597976.32912684208713472 5252714.46796212624758482, 597960.83670412888750434 5252722.34645610395818949, 597954.80303351080510765 5252726.29207262024283409, 597950.47398121154401451 5252730.26614891830831766, 597946.31339777237735689 5252737.25556244235485792, 597944.3737932329531759 5252739.10184527188539505, 597941.63215184479486197 5252739.27841060236096382, 597936.19159107678569853 5252737.97592682391405106, 597923.69296096393372864 5252733.28746316954493523, 597920.55793325835838914 5252733.97994054108858109, 597918.16949731926433742 5252736.95260631944984198, 597916.46947563183493912 5252741.17067136522382498, 597914.78152554982807487 5252750.09114010818302631, 597914.48893582844175398 5252757.67870199307799339, 597912.68934289528988302 5252767.86456852685660124, 597904.34332416555844247 5252776.10701445676386356, 597897.83861407521180809 5252784.32460951339453459, 597897.19417587306816131 5252785.87014221679419279, 597897.56661881261970848 5252789.32241388317197561, 597896.67513459292240441 5252790.75266185682266951, 597895.10754493344575167 5252791.1044639591127634, 597890.16556669550482184 5252789.76587426662445068, 597885.94483213440980762 5252790.4180244505405426, 597860.49319061054848135 5252802.86619597673416138, 597852.65645510179456323 5252809.98334161937236786, 597847.383101268671453 5252816.75417063012719154, 597839.37145616090856493 5252820.78919764794409275, 597837.23622283397708088 5252825.3224001731723547, 597833.70338299218565226 5252827.25331635028123856, 597830.60680654621683061 5252831.52593387477099895, 597822.38979850546456873 5252837.92533387709408998, 597807.77706828759983182 5252853.7114640548825264, 597804.89517726085614413 5252858.23223171196877956, 597803.96292150416411459 5252862.56317076273262501, 597803.45914376713335514 5252881.01896834094077349, 597799.39498121407814324 5252917.54612862411886454, 597799.35123810323420912 5252918.81265919469296932, 597799.1451991880312562 5252925.29003543872386217, 597800.41452322865370661 5252925.17779636848717928, 597803.64049390633590519 5252921.28527586907148361, 597804.78763315931428224 5252919.90374139882624149, 597806.76474128081463277 5252918.9695779075846076, 597808.49687165149953216 5252919.15407914947718382, 597810.87210623524151742 5252921.03898076713085175, 597814.51679302309639752 5252926.42445148248225451, 597820.40743358782492578 5252940.99609381426125765, 597830.54240649344865233 5252943.98860951233655214, 597837.69553089002147317 5252943.018479123711586, 597850.97723291604779661 5252937.37054136954247952, 597863.50514684547670186 5252935.7564000990241766, 597871.20865148934535682 5252930.73803386557847261, 597882.62222479295451194 5252925.82603208720684052))";
		Polygon polygon = (Polygon)reader.read(waterbody);
		polygon.setUserData(new PolygonInfo(null, "1"));
		
		List<ConstructionPoint> expected = new ArrayList<>();
		
		expected.add(new ConstructionPoint(new Coordinate(598024.44550524628721178, 5252721.89686999097466469), NodeType.BANK, FlowDirection.INPUT, null));
		expected.add(new ConstructionPoint(new Coordinate(598277.66550175857264549, 5252743.12922753859311342),	NodeType.BANK, FlowDirection.INPUT, null));
		expected.add(new ConstructionPoint(new Coordinate(598060.80465792480390519, 5252864.01518434938043356), NodeType.FLOWPATH, FlowDirection.UNKNOWN, null));
		expected.add(new ConstructionPoint(new Coordinate(598523.23930121108423918, 5252742.92301362752914429), NodeType.FLOWPATH, FlowDirection.UNKNOWN, null));
		expected.add(new ConstructionPoint(new Coordinate(598507.61879747675266117, 5252728.27620856370776892), NodeType.BANK, FlowDirection.INPUT, null));
		expected.add(new ConstructionPoint(new Coordinate(598532.02211975702084601, 5252693.4470893582329154), NodeType.FLOWPATH, FlowDirection.UNKNOWN, null));
				
		SkeletonGenerator gen = createGenerator(.75, .25, 1);
		SkeletonResult results = gen.generateSkeleton(polygon,  expected);
		results.getSkeletons().forEach(e->System.out.println(e.getLineString().toText()));
		results.getErrors().forEach(e->System.out.println(e));
		Assert.assertTrue("Skeleton returned errors", results.getErrors().isEmpty());
	}
	
	
	@Test
	public void collapseTest() throws Exception{
		String waterbody = "Polygon ((585241.72656285483390093 5219914.46895855944603682, 585241.38972514017950743 5219898.32509444840252399, 585242.2220211805542931 5219888.97820714022964239, 585246.56401554518379271 5219877.70330751407891512, 585248.95360534032806754 5219860.82059352938085794, 585249.41376617690548301 5219846.75558483134955168, 585248.93780827964656055 5219843.98109934572130442, 585247.75136953429318964 5219842.60800683405250311, 585245.94649765407666564 5219843.09334730356931686, 585243.86013611289672554 5219842.05188238807022572, 585243.35773730603978038 5219840.58859050646424294, 585243.89173523080535233 5219835.10544467903673649, 585240.59610823937691748 5219831.11222761031240225, 585236.91125407407525927 5219829.39199728332459927, 585233.33097554359119385 5219828.84035045374184847, 585230.94903997157234699 5219829.36185990180820227, 585229.38925871229730546 5219830.73993087094277143, 585228.38106268469709903 5219833.32635410502552986, 585228.1294759379234165 5219836.57944028358906507, 585227.89880919177085161 5219839.43268624506890774, 585233.99648770247586071 5219851.14666151162236929, 585235.51413071760907769 5219857.44846976362168789, 585235.71446327189914882 5219864.62054238934069872, 585234.59653962193988264 5219871.67362814396619797, 585226.42677526851184666 5219890.11827847454696894, 585224.08293352508917451 5219892.74107781052589417, 585222.84307632932905108 5219893.50130741577595472, 585216.86282159143593162 5219889.98080470878630877, 585218.84580339258536696 5219887.13051516748964787, 585220.0744973795954138 5219883.98039346747100353, 585220.58205592771992087 5219876.64065631758421659, 585223.38225904479622841 5219871.82364012114703655, 585226.0142475264146924 5219867.62664861604571342, 585226.81766391627024859 5219863.98135376442223787, 585226.71934293839149177 5219858.15566636528819799, 585225.30011627194471657 5219853.97824537567794323, 585221.47133878606837243 5219850.1329854391515255, 585209.4916438942309469 5219844.94792546145617962, 585208.03246792673598975 5219845.66054619569331408, 585206.49120044556912035 5219853.14103808719664812, 585203.11953983001876622 5219855.4934289613738656, 585200.41747550549916923 5219855.06557265389710665, 585191.47786890075076371 5219850.01315749064087868, 585186.93093845678959042 5219849.15865815430879593, 585185.22339481429662555 5219849.73433553241193295, 585182.43463322008028626 5219857.45255479961633682, 585176.95619933202397078 5219868.63336617592722178, 585175.627814797218889 5219873.97172383405268192, 585177.0433987689903006 5219878.4047255041077733, 585182.50267885916400701 5219883.34042511321604252, 585186.59835077007301152 5219889.20131438691169024, 585188.05024755850899965 5219895.85784595273435116, 585189.69039531168527901 5219898.91581466142088175, 585197.60251469316426665 5219907.36577725317329168, 585202.62537784839514643 5219908.88291226141154766, 585205.66664571815636009 5219907.348285430110991, 585206.42396401194855571 5219908.49290202278643847, 585210.157779699889943 5219914.19299803581088781, 585210.17957457154989243 5219914.26000144239515066, 585210.87780877843033522 5219916.34854678809642792, 585218.11636815848760307 5219927.32308398559689522, 585220.84590601699892431 5219933.75345922727137804, 585221.5304214870557189 5219945.76752885337918997, 585218.88973582629114389 5219955.32184040732681751, 585219.23229654948227108 5219957.34969950467348099, 585221.48323976132087409 5219958.54913308843970299, 585226.45233162422664464 5219959.0540491845458746, 585226.73327139881439507 5219959.0358577249571681, 585240.87390615872573107 5219958.47221380472183228, 585242.11885518603958189 5219958.41230824589729309, 585241.8175691586220637 5219957.20755322091281414, 585240.18196847010403872 5219950.6706299064680934, 585242.2541287955828011 5219938.45166080072522163, 585239.56725615181494504 5219931.16603118646889925, 585239.19000250624958426 5219925.74758833087980747, 585241.72656285483390093 5219914.46895855944603682))";
		Polygon polygon = (Polygon)reader.read(waterbody);
		polygon.setUserData(new PolygonInfo(null, "1"));
		
		List<ConstructionPoint> expected = new ArrayList<>();
		
		expected.add(new ConstructionPoint(new Coordinate(585210.157779699889943, 5219914.19299803581088781),NodeType.BANK,FlowDirection.INPUT, null));
		expected.add(new ConstructionPoint(new Coordinate(585220.84590601699892431, 5219933.75345922727137804),NodeType.BANK,FlowDirection.INPUT, null));
		expected.add(new ConstructionPoint(new Coordinate(585206.42396401194855571, 5219908.49290202278643847),NodeType.FLOWPATH,FlowDirection.UNKNOWN, null));
		expected.add(new ConstructionPoint(new Coordinate(585228.1294759379234165, 5219836.57944028358906507),NodeType.FLOWPATH,FlowDirection.UNKNOWN, null));
		expected.add(new ConstructionPoint(new Coordinate(585242.2220211805542931, 5219888.97820714022964239),NodeType.BANK,FlowDirection.INPUT, null));
		expected.add(new ConstructionPoint(new Coordinate(585221.47133878606837243, 5219850.1329854391515255),NodeType.BANK,FlowDirection.INPUT, null));
		expected.add(new ConstructionPoint(new Coordinate(585226.73327139881439507, 5219959.0358577249571681),NodeType.FLOWPATH,FlowDirection.UNKNOWN, null));
		expected.add(new ConstructionPoint(new Coordinate(585210.17957457154989243, 5219914.26000144239515066),NodeType.FLOWPATH,FlowDirection.UNKNOWN, null));
		
		
				
		SkeletonGenerator gen = createGenerator(.75, .25, .2);
		SkeletonResult results = gen.generateSkeleton(polygon,  expected);
		results.getSkeletons().forEach(e->System.out.println(e.getLineString().toText()));
		results.getErrors().forEach(e->System.out.println(e));
		Assert.assertTrue("Skeleton returned errors", results.getErrors().isEmpty());
	}
}
